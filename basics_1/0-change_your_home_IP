#!/usr/bin/env bash
# Définition du chemin vers le fichier hosts d'origine
HOSTS_FILE="/etc/hosts"
# Définition du chemin vers un fichier temporaire, utilisant $$ (PID du script) pour garantir un nom unique
TMP_FILE="/tmp/hosts.tmp.$$"

# Création du fichier temporaire sans les lignes contenant 'localhost' ou 'facebook.com'
# La commande 'grep -v' exclut les lignes correspondant à l'expression régulière '\slocalhost$|facebook\.com'
# - '\s' correspond à un espace avant 'localhost' (pour éviter de supprimer des occurrences non pertinentes)
# - 'localhost$' correspond à 'localhost' en fin de ligne (afin de ne pas toucher d'autres mentions de localhost)
# - 'facebook\.com' correspond à toute ligne contenant facebook.com
# Le résultat de cette commande est redirigé vers un fichier temporaire
grep -v -E '\slocalhost$|facebook\.com' "$HOSTS_FILE" > "$TMP_FILE"

# Ajout de la ligne pour que 'localhost' résolve vers 127.0.0.2
# Cette commande ajoute "127.0.0.2 localhost" à la fin du fichier temporaire
echo "127.0.0.2 localhost" >> "$TMP_FILE"
# Ajout de la ligne pour que 'facebook.com' résolve vers 8.8.8.8
# Cette commande ajoute "8.8.8.8 facebook.com" à la fin du fichier temporaire
echo "8.8.8.8 facebook.com" >> "$TMP_FILE"

# Remplacement du fichier /etc/hosts par le fichier temporaire modifié
# On utilise 'cp' pour copier le fichier temporaire vers le fichier original
# Si la commande échoue (par exemple à cause de permissions insuffisantes), 
# un message d'erreur est affiché et le fichier temporaire est supprimé pour éviter de laisser des fichiers inutiles.
cp "$TMP_FILE" "$HOSTS_FILE" || { # Message d'erreur en cas d'échec
  echo "Erreur : impossible d'écraser $HOSTS_FILE" # Suppression du fichier temporaire
  rm -f "$TMP_FILE" # Arrêt du script avec un code d'erreur
  exit 1
}

# Suppression du fichier temporaire une fois le remplacement effectué
rm -f "$TMP_FILE"
